{"GLOBAL": {"DESCRIPTION": "This paper studies the effect of industrial policy in China, the VAT export tax, on the quality upgrading. We use Chinese transaction data for 2002-2006 to isolate the causal impact of the exogenous variation of VAT refund tax and within firm-product change in HS6 exported quality products.", "GITHUB": {"owner": "thomaspernet", "repo_name": "VAT_rebate_quality_china"}, "DATABASE": "", "QUERIES_OUTPUT": "SQL_OUTPUT_ATHENA"}, "TABLES": {"CREATION": {"ALL_SCHEMA": [{"description": "Download GDP per capita from the World Bank Website", "schema": [{"Name": "country", "Type": "string", "Comment": "Country name"}, {"Name": "iso_alpha", "Type": "string", "Comment": "Country code"}, {"Name": "iso_alpha03", "Type": "string", "Comment": "Country code, iso 03"}, {"Name": "year", "Type": "string", "Comment": "Year"}, {"Name": "gni_per_capita", "Type": "float", "Comment": "GDP per capita is gross domestic product divided by midyear population"}, {"Name": "gpd_per_capita", "Type": "float", "Comment": "GNI per capita (formerly GNP per capita) is the gross national income, converted to U.S. dollars using the World Bank Atlas method, divided by the midyear population"}, {"Name": "income_group", "Type": "string", "Comment": "One of 'Others', 'Low income', 'Upper middle income','High income: nonOECD', 'Lower middle income', 'High income: OECD'"}], "partition_keys": [], "metadata": {"DatabaseName": "world_bank", "TablePrefix": "world_bank_", "target_S3URI": "s3://datalake-datascience/DATA/ECON/TRADE_DATA/RAW/WORLD_BANK/GDP_PER_CAPITA", "from_athena": "False", "filename": "gdp_per_capita.py", "github_url": "https://github.com/thomaspernet/VAT_rebate_quality_china/01_data_preprocessing/00_download_data/WORLD_BANK/gdp_per_capita.py"}}, {"description": "Download homogeneous goods from R library concordance", "schema": [{"Name": "hs6", "Type": "string", "Comment": "HS6 6 digits"}, {"Name": "goods", "Type": "string", "Comment": "0 is homoegeous and 1 is heterogeneous"}, {"Name": "homogeneous", "Type": "string", "Comment": "Goods label"}], "partition_keys": [], "metadata": {"DatabaseName": "industry", "TablePrefix": "hs6_", "target_S3URI": "s3://datalake-datascience/TRADE_DATA/RAW/GOODS_CLASSIFICATION/HOMOGENEOUS", "from_athena": "False", "filename": "hs_homogeneous_goods.py", "github_url": "https://github.com/thomaspernet/VAT_rebate_quality_china/01_data_preprocessing/00_download_data/HOMOGENEOUS_GOODS/hs_homogeneous_goods.py"}}, {"description": "Download city-product Density China", "schema": [{"Name": "hs6", "Type": "string", "Comment": "HS6 6 digits"}, {"Name": "density_china_ville", "Type": "float", "Comment": "Density china city-product"}, {"Name": "geocode4_corr", "Type": "string", "Comment": "Chinese city code"}], "partition_keys": [], "metadata": {"DatabaseName": "chinese_trade", "TablePrefix": "china_", "target_S3URI": "s3://datalake-datascience/DATA/ECON/TRADE_DATA/CHINA/DENSITY", "from_athena": "False", "filename": "density.py", "github_url": "https://github.com/thomaspernet/VAT_rebate_quality_china/01_data_preprocessing/00_download_data/DENSITY/density.py"}}, {"description": "Download Baci export values HS6 country source destination", "schema": [{"Name": "t", "Type": "string", "Comment": "year"}, {"Name": "hs6", "Type": "string", "Comment": "HS6 6 digits"}, {"Name": "i", "Type": "string", "Comment": "origin country ID"}, {"Name": "j", "Type": "string", "Comment": "Destination country ID"}, {"Name": "v", "Type": "float", "Comment": "Export value"}, {"Name": "q", "Type": "float", "Comment": "Export quantity"}], "partition_keys": [], "metadata": {"DatabaseName": "trade", "TablePrefix": "baci_", "target_S3URI": "s3://datalake-datascience/DATA/ECON/TRADE_DATA/BACI/EXPORT", "from_athena": "False", "filename": "baci_92_2002.py", "github_url": "https://github.com/thomaspernet/VAT_rebate_quality_china/01_data_preprocessing/00_download_data/BACI/baci_92_2002.py"}}, {"description": "Download vat rebate", "schema": [{"Name": "hs6", "Type": "string", "Comment": "6 digits product line"}, {"Name": "year", "Type": "string", "Comment": ""}, {"Name": "vat_m", "Type": "float", "Comment": "6 digits product line tax"}, {"Name": "vat_reb_m", "Type": "float", "Comment": "Percentage of tax refunded"}, {"Name": "tax_rebate", "Type": "float", "Comment": "Effective tax level: vat_m - vat_reb_m "}], "partition_keys": [], "metadata": {"DatabaseName": "chinese_trade", "TablePrefix": "hs6_", "target_S3URI": "s3://datalake-datascience/DATA/ECON/TAX_DATA/CHINA_VAT_REBATE", "from_athena": "False", "filename": "vat_rebate.py", "github_url": "https://github.com/thomaspernet/VAT_rebate_quality_china/01_data_preprocessing/00_download_data/VAT_REBATE/vat_rebate.py"}}, {"description": "Create import export china", "schema": [{"Name": "date", "Type": "string", "Comment": "year trade recorded"}, {"Name": "ID", "Type": "string", "Comment": "firm ID"}, {"Name": "business_type", "Type": "string", "Comment": "business trade type"}, {"Name": "intermediate", "Type": "string", "Comment": "company name includes the following \u8fdb\u51fa\u53e3, \u8d38\u6613, \u5916\u8d38,\u5916\u7ecf, \u7ecf\u8d38, \u5de5\u8d38, \u79d1\u8d38, then there are intermediates firms"}, {"Name": "trade_type", "Type": "string", "Comment": "Trade type including ordianry or processing"}, {"Name": "province", "Type": "string", "Comment": "Province name"}, {"Name": "city_prod", "Type": "string", "Comment": "production site city name"}, {"Name": "matching_city", "Type": "string", "Comment": "matching name"}, {"Name": "imp_exp", "Type": "string", "Comment": "import or export"}, {"Name": "hs", "Type": "string", "Comment": "HS6 6 digit"}, {"Name": "origin_or_destination", "Type": "string", "Comment": "source or destination country"}, {"Name": "value", "Type": "int", "Comment": "import or export value"}, {"Name": "quantities", "Type": "int", "Comment": "import or export quantity"}], "partition_keys": [], "metadata": {"DatabaseName": "chinese_trade", "TablePrefix": "china_", "target_S3URI": "s3://datalake-datascience/DATA/ECON/TRADE_DATA/CHINA/IMPORT_EXPORT", "from_athena": "False", "filename": "import_export.py", "github_url": "https://github.com/thomaspernet/VAT_rebate_quality_china/01_data_preprocessing/00_download_data/TRADE_CHINA/import_export.py"}}, {"description": "Download chinese country name (initialy in big query)", "schema": [{"Name": "country_cn", "Type": "string", "Comment": "Chinese country name"}, {"Name": "country_en", "Type": "string", "Comment": "English country name"}, {"Name": "iso_alpha", "Type": "string", "Comment": "country ID 1"}, {"Name": "code", "Type": "string", "Comment": "country ID 2"}, {"Name": "index", "Type": "int", "Comment": "index"}], "partition_keys": [], "metadata": {"DatabaseName": "chinese_lookup", "TablePrefix": "china_", "target_S3URI": "s3://datalake-datascience/DATA/ECON/LOOKUP_DATA/COUNTRY_NAME", "from_athena": "False", "filename": "chinese_country_name.py", "github_url": "https://github.com/thomaspernet/VAT_rebate_quality_china/01_data_preprocessing/00_download_data/COUNTRY_NAME/chinese_country_name.py"}}, {"description": "Download trade tariff china", "schema": [{"Name": "reporter", "Type": "string", "Comment": ""}, {"Name": "year", "Type": "string", "Comment": ""}, {"Name": "import_tax", "Type": "float", "Comment": ""}, {"Name": "hs6", "Type": "string", "Comment": ""}], "partition_keys": [], "metadata": {"DatabaseName": "chinese_trade", "TablePrefix": "china_", "target_S3URI": "s3://datalake-datascience/DATA/ECON/TAX_DATA/CHINA/APPLIED_MFN_TARIFFS_HS2", "from_athena": "False", "filename": "mnf_tariff.py", "github_url": "https://github.com/thomaspernet/VAT_rebate_quality_china/01_data_preprocessing/00_download_data/APPLIED_MFN_TARIFFS/mnf_tariff.py"}}, {"description": "Download sigma coefficient restricted to China", "schema": [{"Name": "ccode", "Type": "string", "Comment": "Country code"}, {"Name": "cname", "Type": "string", "Comment": "countr name"}, {"Name": "sigma", "Type": "float", "Comment": "sigma"}, {"Name": "hs3", "Type": "string", "Comment": "industry code"}], "partition_keys": [], "metadata": {"DatabaseName": "chinese_trade", "TablePrefix": "china_", "target_S3URI": "s3://datalake-datascience/DATA/ECON/INDUSTRY/ADDITIONAL_DATA/SIGMAS_HS3", "from_athena": "False", "filename": "sigma.py", "github_url": "https://github.com/thomaspernet/VAT_rebate_quality_china/01_data_preprocessing/00_download_data/SIGMA/sigma.py"}}]}, "PREPARATION": {"STEPS": []}, "TRANSFORMATION": {"STEPS": [{"description": "\nFilter trade data, aggregate quantity and values and construct unit price\n", "query": "\nCREATE TABLE chinese_trade.china_export_tariff_tax WITH (format = 'PARQUET') AS\nWITH filter_data AS (\n  SELECT \n    date as year, \n    id, \n    trade_type, \n    business_type, \n    CASE WHEN length(hs) < 5 THEN CONCAT('0', hs) ELSE hs END as hs6, \n    city_prod, \n    origin_and_destination as destination, \n    quantity, \n    value, \n    CASE WHEN trade_type = '\u8fdb\u6599\u52a0\u5de5\u8d38\u6613' \n    OR trade_type = '\u4e00\u822c\u8d38\u6613' THEN 'ELIGIBLE' ELSE 'NOT_ELIGIBLE' END as regime \n  FROM \n    chinese_trade.china_import_export \n  WHERE \n    date in (\n      '2002', '2003', '2004', '2005', '2006', \n      '2007', '2008', '2009', '2010'\n    ) \n    AND imp_exp = '\u51fa\u53e3' \n    AND (\n      trade_type = '\u8fdb\u6599\u52a0\u5de5\u8d38\u6613' \n      OR trade_type = '\u4e00\u822c\u8d38\u6613' \n      OR trade_type = '\u6765\u6599\u52a0\u5de5\u88c5\u914d\u8d38\u6613' \n      OR trade_type = '\u52a0\u5de5\u8d38\u6613'\n    ) \n    AND intermediate = 'No' \n    AND (\n      business_type = '\u56fd\u6709\u4f01\u4e1a' \n      OR business_type = '\u79c1\u8425\u4f01\u4e1a' \n      OR business_type = '\u96c6\u4f53\u4f01\u4e1a' \n      OR business_type = '\u56fd\u6709' \n      OR business_type = '\u79c1\u8425' \n      OR business_type = '\u96c6\u4f53'\n    ) \n    AND quantity > 0 \n    AND value > 0\n) \nSELECT \n  * \nFROM \n  (\n    WITH duplicate AS (\n      SELECT \n        * \n      FROM \n        (\n          WITH aggregate AS (\n            SELECT \n              city_prod, \n              year, \n              regime, \n              hs6, \n              destination, \n              SUM(quantity) as quantity, \n              SUM(value) as value \n            FROM \n              filter_data \n            GROUP BY \n              year, \n              regime, \n              HS6, \n              city_prod, \n              destination\n          ) \n          SELECT \n            cityen, \n            geocode4_corr, \n            aggregate.year, \n            regime, \n            aggregate.hs6, \n            country_en, \n            ISO_alpha, \n            quantity, \n            value, \n            CASE WHEN quantity = 0 THEN NULL ELSE CAST(\n              value AS DECIMAL(16, 5)\n            ) / CAST(\n              quantity AS DECIMAL(16, 5)\n            ) END AS unit_price, \n            lag_vat_m, \n            ln(1 + lag_vat_m) as ln_lag_vat_m, \n            lag_vat_reb_m, \n            ln(1 + lag_vat_reb_m) as ln_lag_vat_reb_m, \n            lag_tax_rebate, \n            ln(1 + lag_tax_rebate) as ln_lag_tax_rebate, \n            lag_import_tax, \n            ln(1 + lag_import_tax) AS ln_lag_import_tax \n          FROM \n            aggregate \n            INNER JOIN (\n              SELECT \n                DISTINCT(citycn) as citycn, \n                cityen, \n                geocode4_corr \n              FROM \n                chinese_lookup.city_cn_en\n            ) AS city_cn_en ON city_cn_en.citycn = aggregate.city_prod \n            LEFT JOIN chinese_lookup.china_country_name ON china_country_name.country_cn = aggregate.destination \n            INNER JOIN (\n              SELECT \n                year, \n                hs6, \n                LAG(import_tax, 1) OVER (\n                  PARTITION BY hs6 \n                  ORDER BY \n                    hs6, \n                    year\n                ) AS lag_import_tax \n              FROM \n                chinese_trade.china_applied_mfn_tariffs_hs2 \n              WHERE \n                import_tax IS NOT NULL\n            ) as import_tarrif ON import_tarrif.year = aggregate.year \n            AND import_tarrif.hs6 = aggregate.hs6 \n            LEFT JOIN (\n              SELECT \n                HS6, \n                year, \n                LAG(vat_m, 1) OVER (\n                  PARTITION BY hs6 \n                  ORDER BY \n                    hs6, \n                    year\n                ) AS lag_vat_m, \n                LAG(vat_reb_m, 1) OVER (\n                  PARTITION BY hs6 \n                  ORDER BY \n                    HS6, \n                    year\n                ) AS lag_vat_reb_m, \n                LAG(tax_rebate, 1) OVER (\n                  PARTITION BY hs6 \n                  ORDER BY \n                    HS6, \n                    year\n                ) AS lag_tax_rebate \n              FROM \n                chinese_trade.hs6_china_vat_rebate \n              WHERE \n                vat_m IS NOT NULL\n            ) as vat ON aggregate.year = vat.year \n            AND aggregate.HS6 = vat.hs6 \n          WHERE \n            lag_tax_rebate IS NOT NULL \n            AND lag_import_tax IS NOT NULL \n          ORDER BY \n            geocode4_corr, \n            HS6, \n            year, \n            regime\n        )\n    ) \n    SELECT \n      duplicate.geocode4_corr, \n      duplicate.year, \n      duplicate.regime, \n      duplicate.hs6, \n      duplicate.country_en, \n      iso_alpha, \n      quantity, \n      value, \n      unit_price, \n      lag_vat_m, \n      ln_lag_vat_m, \n      lag_vat_reb_m, \n      ln_lag_vat_reb_m, \n      lag_tax_rebate, \n      ln_lag_tax_rebate, \n      lag_import_tax, \n      ln_lag_import_tax, \n      cnt \n    FROM \n      duplicate \n      INNER JOIN (\n        SELECT \n          COUNT(*) AS cnt, \n          geocode4_corr, \n          year, \n          regime, \n          hs6, \n          country_en \n        FROM \n          duplicate \n        GROUP BY \n          geocode4_corr, \n          year, \n          regime, \n          hs6, \n          country_en\n      ) as tmp ON duplicate.geocode4_corr = tmp.geocode4_corr \n      AND duplicate.year = tmp.year \n      AND duplicate.regime = tmp.regime \n      AND duplicate.hs6 = tmp.hs6 \n      AND duplicate.country_en = tmp.country_en \n  ) \nWHERE \n  cnt = 1\n  AND ln_lag_vat_reb_m IS NOT NULL\n  AND lag_vat_reb_m IS NOT NULL\n\n", "schema": [{"Name": "cityen", "Type": "string", "Comment": "English city name"}, {"Name": "geocode4_corr", "Type": "string", "Comment": "Chinese city code"}, {"Name": "year", "Type": "string", "Comment": "year"}, {"Name": "regime", "Type": "varchar(12)", "Comment": "eligible or no eligible to vat rebate"}, {"Name": "hs6", "Type": "string", "Comment": "HS6 6 digit"}, {"Name": "country_en", "Type": "string", "Comment": "English country name"}, {"Name": "iso_alpha", "Type": "string", "Comment": ""}, {"Name": "quantity", "Type": "bigint", "Comment": "Export quantity"}, {"Name": "value", "Type": "bigint", "Comment": "Export value"}, {"Name": "unit_price", "Type": "decimal(21,5)", "Comment": "product unit price"}, {"Name": "lag_vat_m", "Type": "float", "Comment": "lag vat tax"}, {"Name": "ln_lag_vat_m", "Type": "double", "Comment": "log lag vat tax"}, {"Name": "lag_vat_reb_m", "Type": "float", "Comment": "lag vat rebate"}, {"Name": "ln_lag_vat_reb_m", "Type": "double", "Comment": "log lag vat rebate"}, {"Name": "lag_tax_rebate", "Type": "float", "Comment": "lag vat rebate to pay"}, {"Name": "ln_lag_tax_rebate", "Type": "double", "Comment": "log lag vat rebate to pay"}, {"Name": "lag_import_tax", "Type": "float", "Comment": "lag import tax"}, {"Name": "ln_lag_import_tax", "Type": "double", "Comment": "log lag import tax"}, {"Name": "cnt", "Type": "bigint", "Comment": "remove duplicate"}], "partition_keys": ["geocode4_corr", "year", "regime", "hs6", "country_en"], "metadata": {"DatabaseName": "chinese_trade", "TableName": "china_export_tariff_tax", "input": ["china_import_export", "city_cn_en", "china_country_name", "china_applied_mfn_tariffs_hs2", "hs6_china_vat_rebate"], "target_S3URI": "s3://datalake-datascience/DATA/ECON/TRADE_DATA/CHINA/EXPORT_TARIFF_TAX", "from_athena": "True", "filename": "00_export_vat.ipynb", "index_final_table": [0], "if_final": "False", "github_url": "https://github.com/thomaspernet/VAT_rebate_quality_china/blob/master/01_data_preprocessing/02_transform_tables/00_export_vat.md"}}, {"description": "\nCompute Kandhelwal quality. The quality is computed at the city product-destination-level for each year in our sample\n", "query": "\nSELECT * \nFROM chinese_trade.china_export_tariff_tax\n", "schema": [{"Name": "ccode", "Type": "string", "Comment": "country code"}, {"Name": "cname", "Type": "string", "Comment": "country name"}, {"Name": "country_en", "Type": "string", "Comment": "country name english"}, {"Name": "iso_alpha", "Type": "string", "Comment": ""}, {"Name": "geocode4_corr", "Type": "string", "Comment": "city code"}, {"Name": "year", "Type": "string", "Comment": "year"}, {"Name": "regime", "Type": "string", "Comment": "eligible to vat rebate"}, {"Name": "hs6", "Type": "string", "Comment": "HS6 6 digits"}, {"Name": "hs3", "Type": "string", "Comment": "HS3 3 digits"}, {"Name": "hs4", "Type": "string", "Comment": "HS4 4 digits"}, {"Name": "quantity", "Type": "float", "Comment": "Export quantity"}, {"Name": "value", "Type": "float", "Comment": "Export value"}, {"Name": "unit_price", "Type": "float", "Comment": "Export unit price"}, {"Name": "sigma", "Type": "float", "Comment": "sigma"}, {"Name": "sigma_price", "Type": "float", "Comment": ""}, {"Name": "y", "Type": "float", "Comment": ""}, {"Name": "FE_ct", "Type": "int", "Comment": "city year fixed effect"}, {"Name": "prediction", "Type": "float", "Comment": "prediction OLS"}, {"Name": "residual", "Type": "float", "Comment": "residual OLS"}, {"Name": "price_adjusted_quality", "Type": "float", "Comment": "price adjusted"}, {"Name": "kandhelwal_quality", "Type": "float", "Comment": "Kandhelwal quality"}], "partition_keys": ["geocode4_corr", "year", "regime", "hs6", "country_en"], "metadata": {"DatabaseName": "chinese_trade", "TableName": "china_product_quality", "input": ["china_export_tariff_tax"], "target_S3URI": "s3://datalake-datascience/DATA/ECON/TRADE_DATA/CHINA/PRODUCT_QUALITY", "from_athena": "True", "filename": "01_preparation_quality.ipynb", "index_final_table": [0], "if_final": "False", "github_url": "https://github.com/thomaspernet/VAT_rebate_quality_china/blob/master/01_data_preprocessing/02_transform_tables/01_preparation_quality.md"}}, {"description": "\nCreate lag foreign export quantity at the city, product level\n", "query": "\nCREATE TABLE chinese_trade.export_foreign_city_product WITH (format = 'PARQUET') AS\nWITH filter_data AS (\n  SELECT \n    date as year, \n    id, \n    trade_type, \n    business_type, \n    CASE WHEN length(hs) < 5 THEN CONCAT('0', hs) ELSE hs END as hs6, \n    city_prod, \n    quantity, \n    value, \n    CASE WHEN trade_type = '\u8fdb\u6599\u52a0\u5de5\u8d38\u6613' \n    OR trade_type = '\u4e00\u822c\u8d38\u6613' THEN 'ELIGIBLE' ELSE 'NOT_ELIGIBLE' END as regime, \n    CASE WHEN business_type = '\u5916\u5546\u72ec\u8d44\u4f01\u4e1a' THEN 'FOREIGN' ELSE 'NO_FOREIGN' END as foreign_ownership \n  FROM \n    chinese_trade.china_import_export \n  WHERE \n    date in (\n      '2002', '2003', '2004', '2005', '2006', \n      '2007', '2008', '2009', '2010'\n    ) \n    AND imp_exp = '\u51fa\u53e3' \n    AND (\n      trade_type = '\u8fdb\u6599\u52a0\u5de5\u8d38\u6613' \n      OR trade_type = '\u4e00\u822c\u8d38\u6613' \n      OR trade_type = '\u6765\u6599\u52a0\u5de5\u88c5\u914d\u8d38\u6613' \n      OR trade_type = '\u52a0\u5de5\u8d38\u6613'\n    ) \n    AND intermediate = 'No' \n    AND quantity > 0 \n    AND value > 0\n) \nSELECT \n  * \nFROM \n  (\n    WITH aggregate as (\n      SELECT \n        year, \n        CAST(\n          CAST(year AS INTEGER) -1 AS VARCHAR\n        ) as year_lag, \n        regime, \n        foreign_ownership, \n        city_prod, \n        HS6, \n        SUM(quantity) as quantities \n      FROM \n        filter_data \n      GROUP BY \n        year, \n        regime, \n        foreign_ownership, \n        city_prod, \n        HS6\n    ) \n    SELECT \n      aggregate.year, \n      aggregate.year_lag, \n      aggregate.regime, \n      aggregate.foreign_ownership, \n      geocode4_corr, \n      aggregate.HS6, \n      quantities, \n      CASE WHEN quantities_lag IS NULL THEN 0 ELSE quantities_lag END AS quantities_lag, \n      CASE WHEN total_quantities_lag IS NULL THEN 0 ELSE total_quantities_lag END AS total_quantities_lag, \n      CASE WHEN quantities_lag IS NULL \n      OR total_quantities_lag IS NULL THEN 0 ELSE CAST(\n        quantities_lag AS DECIMAL(16, 5)\n      )/ CAST(\n        total_quantities_lag AS DECIMAL(16, 5)\n      ) END AS lag_foreign_export_share_ckr \n    FROM \n      aggregate \n      LEFT JOIN (\n        SELECT \n          year, \n          regime, \n          foreign_ownership, \n          city_prod, \n          HS6, \n          quantities as quantities_lag \n        FROM \n          aggregate\n      ) as lag_quantities ON aggregate.year_lag = lag_quantities.year \n      AND aggregate.regime = lag_quantities.regime \n      AND aggregate.foreign_ownership = lag_quantities.foreign_ownership \n      AND aggregate.city_prod = lag_quantities.city_prod \n      AND aggregate.HS6 = lag_quantities.HS6 \n      LEFT JOIN (\n        SELECT \n          year, \n          regime, \n          HS6, \n          city_prod, \n          SUM(quantities) as total_quantities_lag \n        FROM \n          aggregate \n        GROUP BY \n          year, \n          regime, \n          HS6, \n          city_prod\n      ) as group_lag ON aggregate.year_lag = group_lag.year \n      AND aggregate.regime = group_lag.regime \n      AND aggregate.city_prod = group_lag.city_prod \n      AND aggregate.HS6 = group_lag.HS6 \n      INNER JOIN (\n        SELECT \n          DISTINCT(citycn) as citycn, \n          cityen, \n          geocode4_corr \n        FROM \n          chinese_lookup.city_cn_en\n      ) AS city_cn_en ON city_cn_en.citycn = aggregate.city_prod \n    WHERE \n      aggregate.foreign_ownership = 'FOREIGN'\n  )\n", "schema": [{"Name": "year", "Type": "string", "Comment": "year"}, {"Name": "year_lag", "Type": "string", "Comment": "previous year"}, {"Name": "regime", "Type": "varchar(12)", "Comment": "eligible or not eligible to vat refund"}, {"Name": "foreign_ownership", "Type": "varchar(10)", "Comment": "foreign or not foreign ownership"}, {"Name": "geocode4_corr", "Type": "string", "Comment": "city id"}, {"Name": "hs6", "Type": "string", "Comment": "HS6 6 digits"}, {"Name": "quantities", "Type": "bigint", "Comment": "export quantity by ownership"}, {"Name": "quantities_lag", "Type": "bigint", "Comment": "lag export quantity by ownership"}, {"Name": "total_quantities_lag", "Type": "bigint", "Comment": "total export lag quantity by city industry"}, {"Name": "lag_foreign_export_share_ckr", "Type": "decimal(21,5)", "Comment": "lag export share city industry regime"}], "partition_keys": ["year_lag", "regime", "geocode4_corr", "hs6"], "metadata": {"DatabaseName": "chinese_trade", "TableName": "export_foreign_city_product", "input": ["china_import_export", "city_cn_en"], "target_S3URI": "s3://datalake-datascience/DATA/ECON/TRADE_DATA/CHINA/EXPORT_SHARE/FOREIGN_CITY_PRODUCT", "from_athena": "True", "filename": "02_ownership_export_share_ckr.ipynb", "index_final_table": [0], "if_final": "False", "github_url": "https://github.com/thomaspernet/VAT_rebate_quality_china/blob/master/01_data_preprocessing/02_transform_tables/02_ownership_export_share_ckr.md"}}, {"description": "\nCreate lag soe export quantity at the city, product level\n", "query": "\nCREATE TABLE chinese_trade.export_soe_city_product WITH (format = 'PARQUET') AS\nWITH filter_data AS (\n  SELECT \n    date as year, \n    id, \n    trade_type, \n    business_type, \n    CASE WHEN length(hs) < 5 THEN CONCAT('0', hs) ELSE hs END as hs6, \n    city_prod, \n    quantity, \n    value, \n    CASE WHEN trade_type = '\u8fdb\u6599\u52a0\u5de5\u8d38\u6613' \n    OR trade_type = '\u4e00\u822c\u8d38\u6613' THEN 'ELIGIBLE' ELSE 'NOT_ELIGIBLE' END as regime, \n    CASE WHEN Business_type = '\u56fd\u6709\u4f01\u4e1a' \n    OR Business_type = '\u56fd\u6709' THEN 'SOE' ELSE 'NO_SOE' END as SOE_ownership \n  FROM \n    chinese_trade.china_import_export \n  WHERE \n    date in (\n      '2002', '2003', '2004', '2005', '2006', \n      '2007', '2008', '2009', '2010'\n    ) \n    AND imp_exp = '\u51fa\u53e3' \n    AND (\n      trade_type = '\u8fdb\u6599\u52a0\u5de5\u8d38\u6613' \n      OR trade_type = '\u4e00\u822c\u8d38\u6613' \n      OR trade_type = '\u6765\u6599\u52a0\u5de5\u88c5\u914d\u8d38\u6613' \n      OR trade_type = '\u52a0\u5de5\u8d38\u6613'\n    ) \n    AND intermediate = 'No' \n    AND quantity > 0 \n    AND value > 0\n) \nSELECT \n  * \nFROM \n  (\n    WITH aggregate as (\n      SELECT \n        year, \n        CAST(\n          CAST(year AS INTEGER) -1 AS VARCHAR\n        ) as year_lag, \n        regime, \n        SOE_ownership, \n        city_prod, \n        HS6, \n        SUM(quantity) as quantities \n      FROM \n        filter_data \n      GROUP BY \n        year, \n        regime, \n        SOE_ownership, \n        city_prod, \n        HS6\n    ) \n    SELECT \n      aggregate.year, \n      aggregate.year_lag, \n      aggregate.regime, \n      aggregate.SOE_ownership, \n      geocode4_corr, \n      aggregate.HS6, \n      quantities, \n      CASE WHEN quantities_lag IS NULL THEN 0 ELSE quantities_lag END AS quantities_lag, \n      CASE WHEN total_quantities_lag IS NULL THEN 0 ELSE total_quantities_lag END AS total_quantities_lag, \n      CASE WHEN quantities_lag IS NULL \n      OR total_quantities_lag IS NULL THEN 0 ELSE CAST(\n        quantities_lag AS DECIMAL(16, 5)\n      )/ CAST(\n        total_quantities_lag AS DECIMAL(16, 5)\n      ) END AS lag_soe_export_share_ckr \n    FROM \n      aggregate \n      LEFT JOIN (\n        SELECT \n          year, \n          regime, \n          SOE_ownership, \n          city_prod, \n          HS6, \n          quantities as quantities_lag \n        FROM \n          aggregate\n      ) as lag_quantities ON aggregate.year_lag = lag_quantities.year \n      AND aggregate.regime = lag_quantities.regime \n      AND aggregate.SOE_ownership = lag_quantities.SOE_ownership \n      AND aggregate.city_prod = lag_quantities.city_prod \n      AND aggregate.HS6 = lag_quantities.HS6 \n      LEFT JOIN (\n        SELECT \n          year, \n          regime, \n          HS6, \n          city_prod, \n          SUM(quantities) as total_quantities_lag \n        FROM \n          aggregate \n        GROUP BY \n          year, \n          regime, \n          HS6, \n          city_prod\n      ) as group_lag ON aggregate.year_lag = group_lag.year \n      AND aggregate.regime = group_lag.regime \n      AND aggregate.city_prod = group_lag.city_prod \n      AND aggregate.HS6 = group_lag.HS6 \n      INNER JOIN (\n        SELECT \n          DISTINCT(citycn) as citycn, \n          cityen, \n          geocode4_corr \n        FROM \n          chinese_lookup.city_cn_en\n      ) AS city_cn_en ON city_cn_en.citycn = aggregate.city_prod \n    WHERE \n      aggregate.SOE_ownership = 'SOE'\n  )\n", "schema": [{"Name": "year", "Type": "string", "Comment": "year"}, {"Name": "year_lag", "Type": "string", "Comment": "previous year"}, {"Name": "regime", "Type": "varchar(12)", "Comment": "eligible or not eligible to vat refund"}, {"Name": "soe_ownership", "Type": "varchar(10)", "Comment": "foreign or not foreign ownership"}, {"Name": "geocode4_corr", "Type": "string", "Comment": "city id"}, {"Name": "hs6", "Type": "string", "Comment": "HS6 6 digits"}, {"Name": "quantities", "Type": "bigint", "Comment": "export quantity by ownership"}, {"Name": "quantities_lag", "Type": "bigint", "Comment": "lag export quantity by ownership"}, {"Name": "total_quantities_lag", "Type": "bigint", "Comment": "total export lag quantity by city industry"}, {"Name": "lag_soe_export_share_ckr", "Type": "decimal(21,5)", "Comment": "lag export share city industry regime"}], "partition_keys": ["year_lag", "regime", "geocode4_corr", "hs6"], "metadata": {"DatabaseName": "chinese_trade", "TableName": "export_soe_city_product", "input": ["china_import_export", "city_cn_en"], "target_S3URI": "s3://datalake-datascience/DATA/ECON/TRADE_DATA/CHINA/EXPORT_SHARE/SOE_CITY_PRODUCT", "from_athena": "True", "filename": "03_ownership_soe_export_share_ckr.ipynb", "index_final_table": [0], "if_final": "False", "github_url": "https://github.com/thomaspernet/VAT_rebate_quality_china/blob/master/01_data_preprocessing/02_transform_tables/03_ownership_soe_export_share_ckr.md"}}]}}, "ANALYSIS": {"COUNT_MISSING": {"top": "SELECT COUNT(*) as nb_obs, ", "middle": "COUNT(*) - COUNT({0}) AS {0}", "bottom": " FROM {}.{}"}, "CATEGORICAL": {"PAIR": "SELECT {2}, COUNT(*) AS nb_obs FROM {0}.{1} GROUP BY {2} ORDER BY nb_obs DESC ", "MULTI_PAIR": "SELECT {2}, {3}, COUNT(*) AS nb_obs FROM {0}.{1} GROUP BY {2}, {3} ORDER BY nb_obs DESC "}, "CONTINUOUS": {"DISTRIBUTION": {"top_1": "SELECT * FROM (WITH table_wrapper AS (", "top_2": ") SELECT table_wrapper.pct,", "top_3": " FROM table_wrapper ", "middle_1": "  LEFT JOIN ( ", "middle_2": " ) as table_2_{0} ON table_wrapper.pct = table_2_{0}.pct ", "bottom": "WITH table_{3} AS ( SELECT MAP( ARRAY[0.25, 0.50, 0.75, 0.95, 0.99], approx_percentile( {2}, ARRAY[0.25, 0.50, 0.75, 0.95, 0.99] ) ) as nest FROM {0}.{1} ) SELECT pct, value AS {2} FROM table_{3} CROSS JOIN UNNEST(nest) AS t(pct, value)"}, "ONE_PAIR_DISTRIBUTION": {"top_1": "SELECT * FROM (WITH table_wrapper AS (", "top_2": ") SELECT table_wrapper.pct, table_wrapper.{}, ", "top_3": " FROM table_wrapper ", "middle_1": "  LEFT JOIN ( ", "middle_2": " ) as table_2_{0} ON table_wrapper.{1} = table_2_{0}.{1} AND table_wrapper.pct = table_2_{0}.pct ", "bottom": "WITH table_{3} AS ( SELECT {4}, MAP(ARRAY[0.25, 0.50, 0.75, 0.95, 0.99], approx_percentile( {2}, ARRAY[0.25, 0.50, 0.75, 0.95, 0.99] ) ) as nest FROM {0}.{1} GROUP BY {4}) SELECT {4}, pct, value AS {2} FROM table_{3} CROSS JOIN UNNEST(nest) AS t(pct, value)"}, "TWO_PAIRS_DISTRIBUTION": "WITH dataset AS ( SELECT {2}, {3}, MAP( ARRAY[0.25, 0.50, 0.75, 0.95, 0.99], approx_percentile( {4}, ARRAY[0.25, 0.50, 0.75, 0.95, 0.99] ) ) as nest FROM {0}.{1} GROUP BY {2}, {3} ) SELECT {2}, {3}, pct, value AS {4} FROM dataset CROSS JOIN UNNEST(nest) AS t(pct, value)"}, "COUNT_DUPLICATES": {"query": "SELECT CNT, COUNT(*) AS CNT_DUPLICATE FROM ( SELECT {2}, COUNT(*) as CNT FROM {0}.{1} GROUP BY {2} ) GROUP BY CNT ORDER BY CNT_DUPLICATE"}}}