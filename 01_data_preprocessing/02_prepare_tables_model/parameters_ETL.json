{"GLOBAL": {"DATABASE": "chinese_trade", "QUERIES_OUTPUT": "SQL_OUTPUT_ATHENA"}, "TABLES": {"CREATION": {"ALL_SCHEMA": [{"database": "chinese_trade", "name": "import_export", "output_id": "", "s3URI": "s3://chinese-data/TRADE_DATA/TRANSFORMED/", "schema": {"comments": [], "format": ["string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "int", "int"], "variables": ["date", "ID", "business_type", "intermediate", "trade_type", "province", "city_prod", "matching_city", "imp_exp", "hs", "origin_or_destination", "values", "quantities"]}, "separator": ","}, {"database": "chinese_trade", "name": "base_hs6_VAT_2002_2012", "output_id": "", "s3URI": "s3://chinese-data/TAX_DATA/TRANSFORMED/VAT_REBATE/", "schema": {"comments": [], "format": ["string", "string", "float", "float", "float", "float"], "variables": ["hs6", "year", "tax_rebate", "ln_vat_rebate", "vat_m", "vat_reb_m"]}, "separator": ","}, {"database": "chinese_trade", "name": "applied_mfn_tariffs_hs02_china_2002_2010", "output_id": "", "s3URI": "s3://chinese-data/TAX_DATA/TRANSFORMED/APPLIED_MFN_TARIFFS/", "schema": {"comments": [], "format": ["string", "string", "float", "string"], "variables": ["reporter", "year", "import_tax", "HS02"]}, "separator": ","}, {"database": "chinese_trade", "name": "sigma_industry", "output_id": "", "s3URI": "s3://chinese-data/ADDITIONAL_DATA/SIGMAS_HS3/", "schema": {"comments": ["Country code", "countr name", "sigma", "industry code"], "format": ["string", "string", "float", "string"], "variables": ["ccode", "cname", "sigma", "HS3"]}, "separator": ","}, {"database": "chinese_lookup", "name": "country_cn_en", "output_id": "", "s3URI": "s3://chinese-data/LOOKUP_DATA/COUNTRY_NAME/", "schema": {"comments": ["Country name in Chinese", "Country name in English", "Country code", "Country code WB"], "format": ["string", "string", "string", "string"], "variables": ["country_cn", "country_en", "iso_alpha", "code_2"]}, "separator": ","}, {"database": "chinese_lookup", "name": "city_cn_en", "output_id": "", "s3URI": "s3://chinese-data/LOOKUP_DATA/CITY_NAME/", "schema": {"comments": ["Correspondence code", "Official code", "City name in Chinese", "City name in English", "Province name in Chinese", "Province name in English"], "format": ["string", "string", "string", "string", "string", "string"], "variables": ["extra_code", "geocode4_corr", "citycn", "cityen", "province_cn", "province_en"]}, "separator": ","}], "template": {"bottom": "ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe' WITH SERDEPROPERTIES ( 'serialization.format' = ',', 'field.delim' = '{0}') LOCATION '{1}' TBLPROPERTIES ('has_encrypted_data'='false', 'skip.header.line.count'='1')", "middle": "{0} {1} {2}", "top": "CREATE EXTERNAL TABLE IF NOT EXISTS {0}.{1} ("}}, "PREPARATION": {"ALL_SCHEMA": [{"STEPS_0": {"name": "Join export, tariff and tax", "execution": [{"database": "chinese_trade", "name": "vat_export_2003_2010", "output_id": "", "query": {"top": "WITH filter_data AS ( SELECT date as year, id, trade_type, business_type, CASE WHEN length(hs) < 5 THEN CONCAT('0', hs) ELSE hs END as hs6, city_prod, origin_or_destination as destination, quantities, \"values\", CASE WHEN trade_type = '\u8fdb\u6599\u52a0\u5de5\u8d38\u6613' OR trade_type = '\u4e00\u822c\u8d38\u6613' THEN 'ELIGIBLE' ELSE 'NOT_ELIGIBLE' END as regime FROM chinese_trade.import_export WHERE date in ('2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010') AND imp_exp = '\u51fa\u53e3' AND ( trade_type = '\u8fdb\u6599\u52a0\u5de5\u8d38\u6613' OR trade_type = '\u4e00\u822c\u8d38\u6613' OR trade_type = '\u6765\u6599\u52a0\u5de5\u88c5\u914d\u8d38\u6613' ) AND intermediate = 'No' AND ( business_type = '\u56fd\u6709\u4f01\u4e1a' OR business_type = '\u79c1\u8425\u4f01\u4e1a' OR business_type = '\u96c6\u4f53\u4f01\u4e1a' OR business_type = '\u56fd\u6709' OR business_type = '\u79c1\u8425' OR business_type = '\u96c6\u4f53' ) )", "middle": "SELECT * FROM ( WITH aggregate AS ( SELECT city_prod, year, regime, hs6, destination, SUM(quantities) as quantity, SUM(\"values\") as value FROM filter_data GROUP BY year, regime, HS6, city_prod, destination )", "bottom": "SELECT cityen, geocode4_corr, aggregate.year, regime, aggregate.hs6, country_en, ISO_alpha, quantity, value, CASE WHEN quantity = 0 THEN NULL ELSE value/quantity END AS unit_price, lag_tax_rebate, ln(1 + lag_tax_rebate) as ln_lag_tax_rebate, lag_import_tax, ln(1 + lag_import_tax) AS ln_lag_import_tax FROM aggregate INNER JOIN (SELECT DISTINCT(citycn) as citycn, cityen,geocode4_corr FROM chinese_lookup.city_cn_en ) AS city_cn_en ON city_cn_en.citycn = aggregate.city_prod LEFT JOIN chinese_lookup.country_cn_en ON country_cn_en.Country_cn = aggregate.destination INNER JOIN ( SELECT year, hs02, LAG(import_tax, 1) OVER ( PARTITION BY hs02 ORDER BY hs02, year ) AS lag_import_tax FROM chinese_trade.applied_mfn_tariffs_hs02_china_2002_2010 WHERE import_tax IS NOT NULL ) as import_tarrif ON import_tarrif.year = aggregate.year AND import_tarrif.HS02 = aggregate.hs6 LEFT JOIN ( SELECT HS6, year, tax_rebate, vat_m, vat_reb_m, LAG(vat_m, 1) OVER ( PARTITION BY hs6 ORDER BY hs6, year ) AS lag_vat_m, LAG(vat_reb_m, 1) OVER ( PARTITION BY hs6 ORDER BY HS6, year ) AS lag_vat_reb_m, LAG(tax_rebate, 1) OVER ( PARTITION BY hs6 ORDER BY HS6, year ) AS lag_tax_rebate FROM chinese_trade.base_hs6_vat_2002_2012 WHERE vat_m IS NOT NULL ) as vat ON aggregate.year = vat.year AND aggregate.HS6 = vat.hs6 WHERE lag_tax_rebate IS NOT NULL AND lag_import_tax IS NOT NULL ORDER BY geocode4_corr, HS6, year, regime )"}}], "schema": [{"Name": "geocode4_corr", "Type": "", "Comment": "Official chinese city ID"}, {"Name": "regime", "Type": "", "Comment": "Eligible or not to the vat refund"}]}}], "template": {"top": "CREATE TABLE {}.{} WITH (format = 'PARQUET') AS "}}}, "ANALYSIS": {"COUNT_MISSING": {"top": "SELECT COUNT(*) as nb_obs, ", "middle": "COUNT(*) - COUNT({0}) AS {0}", "bottom": " FROM {}.{}"}, "CATEGORICAL": {"PAIR": "SELECT {2}, COUNT(*) AS nb_obs FROM {0}.{1} GROUP BY {2} ORDER BY nb_obs DESC ", "MULTI_PAIR": "SELECT {2}, {3}, COUNT(*) AS nb_obs FROM {0}.{1} GROUP BY {2}, {3} ORDER BY nb_obs DESC "}, "CONTINUOUS": {"DISTRIBUTION": {"top_1": "SELECT * FROM (WITH table_wrapper AS (", "top_2": ") SELECT table_wrapper.pct,", "top_3": " FROM table_wrapper ", "middle_1": "  LEFT JOIN ( ", "middle_2": " ) as table_2_{0} ON table_wrapper.pct = table_2_{0}.pct ", "bottom": "WITH table_{3} AS ( SELECT MAP( ARRAY[0.25, 0.50, 0.75, 0.95, 0.99], approx_percentile( {2}, ARRAY[0.25, 0.50, 0.75, 0.95, 0.99] ) ) as nest FROM {0}.{1} ) SELECT pct, value AS {2} FROM table_{3} CROSS JOIN UNNEST(nest) AS t(pct, value)"}, "ONE_PAIR_DISTRIBUTION": {"top_1": "SELECT * FROM (WITH table_wrapper AS (", "top_2": ") SELECT table_wrapper.pct, table_wrapper.{}, ", "top_3": " FROM table_wrapper ", "middle_1": "  LEFT JOIN ( ", "middle_2": " ) as table_2_{0} ON table_wrapper.{1} = table_2_{0}.{1} AND table_wrapper.pct = table_2_{0}.pct ", "bottom": "WITH table_{3} AS ( SELECT {4}, MAP(ARRAY[0.25, 0.50, 0.75, 0.95, 0.99], approx_percentile( {2}, ARRAY[0.25, 0.50, 0.75, 0.95, 0.99] ) ) as nest FROM {0}.{1} GROUP BY {4}) SELECT {4}, pct, value AS {2} FROM table_{3} CROSS JOIN UNNEST(nest) AS t(pct, value)"}, "TWO_PAIRS_DISTRIBUTION": "WITH dataset AS ( SELECT {2}, {3}, MAP( ARRAY[0.25, 0.50, 0.75, 0.95, 0.99], approx_percentile( {4}, ARRAY[0.25, 0.50, 0.75, 0.95, 0.99] ) ) as nest FROM {0}.{1} GROUP BY {2}, {3} ) SELECT {2}, {3}, pct, value AS {4} FROM dataset CROSS JOIN UNNEST(nest) AS t(pct, value)"}}}