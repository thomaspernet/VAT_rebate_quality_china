{"GLOBAL": {"DATABASE": "chinese_trade", "QUERIES_OUTPUT": "SQL_OUTPUT_ATHENA"}, "TABLES": {"CREATION": {"ALL_SCHEMA": [{"database": "chinese_trade", "name": "base_hs6_VAT_2002_2012", "s3_location": "ATHENA/MAIN", "output_id": "", "separator": ",", "s3URI": "s3://chinese-data/TAX_DATA/TRANSFORMED/VAT_REBATE/", "schema": [{"Name": "hs6", "Type": "string", "Comment": ""}, {"Name": "year", "Type": "string", "Comment": ""}, {"Name": "tax_rebate", "Type": "float", "Comment": ""}, {"Name": "ln_vat_rebate", "Type": "float", "Comment": "log (1 + tax_rebate)"}, {"Name": "vat_m", "Type": "float", "Comment": ""}, {"Name": "vat_reb_m", "Type": "float", "Comment": ""}, {"Name": "ln_vat_rebate_m", "Type": "float", "Comment": "log (1 + vat_reb_m)"}]}, {"database": "chinese_trade", "name": "applied_mfn_tariffs_hs02_china_2002_2010", "s3_location": "ATHENA/MAIN", "output_id": "", "separator": ",", "s3URI": "s3://chinese-data/TAX_DATA/TRANSFORMED/APPLIED_MFN_TARIFFS/", "schema": [{"Name": "reporter", "Type": "string", "Comment": ""}, {"Name": "year", "Type": "string", "Comment": ""}, {"Name": "import_tax", "Type": "float", "Comment": ""}, {"Name": "HS02", "Type": "string", "Comment": ""}]}, {"database": "chinese_trade", "name": "sigma_industry", "s3_location": "ATHENA/MAIN", "output_id": "", "separator": ",", "s3URI": "s3://chinese-data/ADDITIONAL_DATA/SIGMAS_HS3/", "schema": [{"Name": "ccode", "Type": "string", "Comment": "Country code"}, {"Name": "cname", "Type": "string", "Comment": "countr name"}, {"Name": "sigma", "Type": "float", "Comment": "sigma"}, {"Name": "HS3", "Type": "string", "Comment": "industry code"}]}, {"database": "chinese_lookup", "name": "country_cn_en", "s3_location": "ATHENA/LOOKUP", "output_id": "", "separator": ",", "s3URI": "s3://chinese-data/LOOKUP_DATA/COUNTRY_NAME/", "schema": [{"Name": "country_cn", "Type": "string", "Comment": "Country name in Chinese"}, {"Name": "country_en", "Type": "string", "Comment": "Country name in English"}, {"Name": "iso_alpha", "Type": "string", "Comment": "Country code"}, {"Name": "code_2", "Type": "string", "Comment": "Country code WB"}]}, {"database": "chinese_lookup", "name": "city_cn_en", "s3_location": "ATHENA/LOOKUP", "output_id": "", "separator": ",", "s3URI": "s3://chinese-data/LOOKUP_DATA/CITY_NAME/", "schema": [{"Name": "extra_code", "Type": "string", "Comment": "Correspondence code"}, {"Name": "geocode4_corr", "Type": "string", "Comment": "Official code"}, {"Name": "citycn", "Type": "string", "Comment": "City name in Chinese"}, {"Name": "cityen", "Type": "string", "Comment": "City name in English"}, {"Name": "province_cn", "Type": "string", "Comment": "Province name in Chinese"}, {"Name": "province_en", "Type": "string", "Comment": "Province name in English"}]}, {"database": "chinese_trade", "name": "import_export", "s3_location": "ATHENA/MAIN", "output_id": "", "separator": ",", "s3URI": "s3://chinese-data/TRADE_DATA/TRANSFORMED/", "schema": [{"Name": "date", "Type": "string", "Comment": ""}, {"Name": "ID", "Type": "string", "Comment": ""}, {"Name": "business_type", "Type": "string", "Comment": ""}, {"Name": "intermediate", "Type": "string", "Comment": ""}, {"Name": "trade_type", "Type": "string", "Comment": ""}, {"Name": "province", "Type": "string", "Comment": ""}, {"Name": "city_prod", "Type": "string", "Comment": ""}, {"Name": "matching_city", "Type": "string", "Comment": ""}, {"Name": "imp_exp", "Type": "string", "Comment": ""}, {"Name": "hs", "Type": "string", "Comment": ""}, {"Name": "origin_or_destination", "Type": "string", "Comment": ""}, {"Name": "value", "Type": "int", "Comment": ""}, {"Name": "quantities", "Type": "int", "Comment": ""}]}, {"database": "chinese_trade", "name": "quality_vat_export_2003_2010", "s3_location": "ATHENA/MAIN", "output_id": "", "separator": ",", "s3URI": "s3://vat-rebate-quality/DATA/TRANSFORMED/QUALITY/BASELINE/", "schema": [{"Name": "cityen", "Type": "string", "Comment": ""}, {"Name": "geocode4_corr", "Type": "string", "Comment": ""}, {"Name": "year", "Type": "string", "Comment": ""}, {"Name": "regime", "Type": "string", "Comment": "Eligible to the rebate or not"}, {"Name": "hs6", "Type": "string", "Comment": ""}, {"Name": "hs4", "Type": "string", "Comment": ""}, {"Name": "hs3", "Type": "string", "Comment": ""}, {"Name": "country_en", "Type": "string", "Comment": ""}, {"Name": "iso_alpha", "Type": "string", "Comment": ""}, {"Name": "quantity", "Type": "int", "Comment": ""}, {"Name": "value", "Type": "int", "Comment": ""}, {"Name": "unit_price", "Type": "float", "Comment": ""}, {"Name": "kandhelwal_quality", "Type": "float", "Comment": "kandhelwal quality. cf https://github.com/thomaspernet/VAT_rebate_quality_china/blob/master/01_data_preprocessing/02_prepare_tables_model/01_preparation_quality.md"}, {"Name": "price_adjusted_quality", "Type": "float", "Comment": "price adjusted quality. https://github.com/thomaspernet/VAT_rebate_quality_china/blob/master/01_data_preprocessing/02_prepare_tables_model/01_preparation_quality.md"}, {"Name": "lag_tax_rebate", "Type": "float", "Comment": ""}, {"Name": "ln_lag_tax_rebate", "Type": "float", "Comment": ""}, {"Name": "lag_vat_reb_m", "Type": "float", "Comment": ""}, {"Name": "ln_lag_vat_reb_m", "Type": "float", "Comment": ""}, {"Name": "lag_import_tax", "Type": "float", "Comment": ""}, {"Name": "ln_lag_import_tax", "Type": "float", "Comment": ""}, {"Name": "sigma", "Type": "float", "Comment": ""}, {"Name": "sigma_price", "Type": "float", "Comment": ""}, {"Name": "y", "Type": "float", "Comment": " log quantity plus sigma "}, {"Name": "prediction", "Type": "float", "Comment": ""}, {"Name": "residual", "Type": "float", "Comment": ""}, {"Name": "FE_ck", "Type": "string", "Comment": "city product FE"}, {"Name": "FE_cst", "Type": "string", "Comment": "City sector year FE"}, {"Name": "FE_ckr", "Type": "string", "Comment": "City product regime FE"}, {"Name": "FE_csrt", "Type": "string", "Comment": "City sector regime year FE"}, {"Name": "FE_kt", "Type": "string", "Comment": "Product year FE"}, {"Name": "FE_kj", "Type": "string", "Comment": "Product destination FE"}, {"Name": "FE_jt", "Type": "string", "Comment": "Destination year FE"}, {"Name": "FE_ckj", "Type": "string", "Comment": "City product destination FE"}]}], "template": {"bottom_Lazyserde": "ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe' WITH SERDEPROPERTIES ( 'serialization.format' = ',', 'field.delim' = '{0}', 'quoteChar' = '\"') LOCATION '{1}' TBLPROPERTIES ('has_encrypted_data'='false', 'skip.header.line.count'='1')", "bottom_OpenCSVSerde": "ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.OpenCSVSerde' WITH SERDEPROPERTIES (  'separatorChar' = '{0}', 'quoteChar' = '\"') LOCATION '{1}' TBLPROPERTIES ('has_encrypted_data'='false', 'skip.header.line.count'='1')", "middle": "{0} {1} {2}", "top": "CREATE EXTERNAL TABLE IF NOT EXISTS {0}.{1} ("}}, "PREPARATION": {"ALL_SCHEMA": [{"STEPS_0": {"name": "Join export, tariff and tax", "execution": [{"database": "chinese_trade", "name": "VAT_export_2003_2010", "s3_location": "ATHENA/MAIN", "output_id": "", "query": {"top": "WITH filter_data AS ( SELECT date as year, id, trade_type, business_type, CASE WHEN length(hs) < 5 THEN CONCAT('0', hs) ELSE hs END as hs6, city_prod, origin_or_destination as destination, quantities, value, CASE WHEN trade_type = '\u8fdb\u6599\u52a0\u5de5\u8d38\u6613' OR trade_type = '\u4e00\u822c\u8d38\u6613' THEN 'ELIGIBLE' ELSE 'NOT_ELIGIBLE' END as regime FROM chinese_trade.import_export WHERE date in ('2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010') AND imp_exp = '\u51fa\u53e3' AND ( trade_type = '\u8fdb\u6599\u52a0\u5de5\u8d38\u6613' OR trade_type = '\u4e00\u822c\u8d38\u6613' OR trade_type = '\u6765\u6599\u52a0\u5de5\u88c5\u914d\u8d38\u6613' OR trade_type = '\u52a0\u5de5\u8d38\u6613') AND intermediate = 'No' AND ( business_type = '\u56fd\u6709\u4f01\u4e1a' OR business_type = '\u79c1\u8425\u4f01\u4e1a' OR business_type = '\u96c6\u4f53\u4f01\u4e1a' OR business_type = '\u56fd\u6709' OR business_type = '\u79c1\u8425' OR business_type = '\u96c6\u4f53' ) AND quantities > 0 AND value > 0)", "middle": "SELECT * FROM ( WITH aggregate AS ( SELECT city_prod, year, regime, hs6, destination, SUM(quantities) as quantity, SUM(value) as value FROM filter_data GROUP BY year, regime, HS6, city_prod, destination )", "bottom": "SELECT cityen, geocode4_corr, aggregate.year, regime, aggregate.hs6, country_en, ISO_alpha, quantity, value, CASE WHEN quantity = 0 THEN NULL ELSE CAST( value AS DECIMAL(16, 5) )/ CAST( quantity AS DECIMAL(16, 5) ) END AS unit_price, lag_tax_rebate, ln(1 + lag_tax_rebate) as ln_lag_tax_rebate, lag_vat_reb_m, ln(1 + lag_vat_reb_m) as ln_lag_vat_reb_m, lag_import_tax, ln(1 + lag_import_tax) AS ln_lag_import_tax FROM aggregate INNER JOIN ( SELECT DISTINCT(citycn) as citycn, cityen, geocode4_corr FROM chinese_lookup.city_cn_en ) AS city_cn_en ON city_cn_en.citycn = aggregate.city_prod LEFT JOIN chinese_lookup.country_cn_en ON country_cn_en.Country_cn = aggregate.destination INNER JOIN ( SELECT year, hs02, LAG(import_tax, 1) OVER ( PARTITION BY hs02 ORDER BY hs02, year ) AS lag_import_tax FROM chinese_trade.applied_mfn_tariffs_hs02_china_2002_2010 WHERE import_tax IS NOT NULL ) as import_tarrif ON import_tarrif.year = aggregate.year AND import_tarrif.HS02 = aggregate.hs6 LEFT JOIN ( SELECT HS6, year, tax_rebate, vat_m, vat_reb_m, LAG(vat_m, 1) OVER ( PARTITION BY hs6 ORDER BY hs6, year ) AS lag_vat_m, LAG(vat_reb_m, 1) OVER ( PARTITION BY hs6 ORDER BY HS6, year ) AS lag_vat_reb_m, LAG(tax_rebate, 1) OVER ( PARTITION BY hs6 ORDER BY HS6, year ) AS lag_tax_rebate FROM chinese_trade.base_hs6_vat_2002_2012 WHERE vat_m IS NOT NULL ) as vat ON aggregate.year = vat.year AND aggregate.HS6 = vat.hs6 WHERE lag_tax_rebate IS NOT NULL AND lag_import_tax IS NOT NULL ORDER BY geocode4_corr, HS6, year, regime )"}}], "schema": [{"Name": "", "Type": "", "Comment": ""}]}}, {"STEPS_1": {"name": "Create lag foreign export at the city, product, destination level", "execution": [{"database": "chinese_trade", "name": "lag_foreign_export_ckjr", "s3_location": "ATHENA/MAIN", "output_id": "", "query": {"top": "WITH filter_data AS ( SELECT date as year, id, trade_type, business_type, CASE WHEN length(hs) < 5 THEN CONCAT('0', hs) ELSE hs END as hs6, city_prod, CASE WHEN origin_or_destination = '\u963f\u9c81\u5df4' OR origin_or_destination = '\u963f\u9c81\u5df4\u5c9b' THEN '\u963f\u9c81\u5df4\u5c9b' WHEN origin_or_destination = '\u8377\u5c5e\u5b89\u5730\u5217\u65af\u7fa4\u5c9b' OR origin_or_destination = '\u8377\u5c5e\u5b89\u7684\u5217\u65af' THEN '\u8377\u5c5e\u5b89\u7684\u5217\u65af' WHEN origin_or_destination = '\u767e\u6155\u5927' OR origin_or_destination = '\u767e\u6155\u5927\u7fa4\u5c9b' THEN '\u767e\u6155\u5927\u7fa4\u5c9b' WHEN origin_or_destination = '\u591a\u7c73\u5c3c\u514b' OR origin_or_destination = '\u591a\u7c73\u5c3c\u52a0' THEN '\u591a\u7c73\u5c3c\u52a0' WHEN origin_or_destination = '\u6cd5\u56fd' OR origin_or_destination = '\u9a6c\u7ea6\u7279' OR origin_or_destination = '\u9a6c\u7ea6\u7279\u5c9b' THEN '\u6cd5\u56fd' WHEN origin_or_destination = '\u74dc\u5fb7\u7f57\u666e' OR origin_or_destination = '\u74dc\u5fb7\u7f57\u666e\u5c9b' THEN '\u74dc\u5fb7\u7f57\u666e\u5c9b' WHEN origin_or_destination = '\u9a6c\u63d0\u5c3c\u514b' OR origin_or_destination = '\u9a6c\u63d0\u5c3c\u514b\u5c9b' THEN '\u9a6c\u63d0\u5c3c\u514b\u5c9b' WHEN origin_or_destination = '\u963f\u62c9\u4f2f\u8054\u5408\u914b\u957f\u56fd' OR origin_or_destination = '\u963f\u8054\u914b' THEN '\u963f\u62c9\u4f2f\u8054\u5408\u914b\u957f\u56fd' WHEN origin_or_destination = '\u5df4\u54c8\u9a6c' OR origin_or_destination = '\u5df4\u6797' THEN '\u5df4\u6797' WHEN origin_or_destination = '\u4e2d\u56fd' OR origin_or_destination = '\u4e2d\u534e\u4eba\u6c11\u5171\u548c\u56fd' OR origin_or_destination = '\u53f0\u6e7e\u7701' THEN '\u4e2d\u56fd' WHEN origin_or_destination = '\u5357\u65af\u62c9\u592b\u8054\u76df\u5171\u548c\u56fd' OR origin_or_destination = '\u524d\u5357\u9a6c\u5176\u987f' OR origin_or_destination = '\u524d\u5357\u65af\u62c9\u592b\u9a6c\u5176\u987f\u5171\u548c\u56fd' THEN '\u5357\u65af\u62c9\u592b\u8054\u76df\u5171\u548c\u56fd' WHEN origin_or_destination = '\u5409\u5c14\u5409\u65af' OR origin_or_destination = '\u5409\u5c14\u5409\u65af\u65af\u5766' THEN '\u5409\u5c14\u5409\u65af\u65af\u5766' WHEN origin_or_destination = '\u9ed1\u5c71' OR origin_or_destination = '\u585e\u5c14\u7ef4\u4e9a' THEN '\u585e\u5c14\u7ef4\u4e9a' ELSE origin_or_destination END AS destination, quantities, value, CASE WHEN trade_type = '\u8fdb\u6599\u52a0\u5de5\u8d38\u6613' OR trade_type = '\u4e00\u822c\u8d38\u6613' THEN 'ELIGIBLE' ELSE 'NOT_ELIGIBLE' END as regime, CASE WHEN business_type = '\u5916\u5546\u72ec\u8d44\u4f01\u4e1a' THEN 'FOREIGN' ELSE 'NO_FOREIGN' END as foreign_ownership FROM chinese_trade.import_export WHERE date in ( '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010' ) AND imp_exp = '\u51fa\u53e3' AND ( trade_type = '\u8fdb\u6599\u52a0\u5de5\u8d38\u6613' OR trade_type = '\u4e00\u822c\u8d38\u6613' OR trade_type = '\u6765\u6599\u52a0\u5de5\u88c5\u914d\u8d38\u6613' OR trade_type = '\u52a0\u5de5\u8d38\u6613' ) AND intermediate = 'No' AND quantities > 0 AND value > 0 )", "middle": "SELECT * FROM ( WITH aggregate as ( SELECT year, CAST( CAST(year AS INTEGER) -1 AS VARCHAR ) as year_lag, regime, foreign_ownership, city_prod, HS6, destination, SUM(quantities) as quantities FROM filter_data GROUP BY year, regime, foreign_ownership, city_prod, HS6, destination )", "bottom": "SELECT aggregate.year, aggregate.year_lag, aggregate.regime, aggregate.foreign_ownership, geocode4_corr, iso_alpha, aggregate.HS6, quantities, CASE WHEN quantities_lag IS NULL THEN 0 ELSE quantities_lag END AS quantities_lag, CASE WHEN total_quantities_lag IS NULL THEN 0 ELSE total_quantities_lag END AS total_quantities_lag, CASE WHEN quantities_lag IS NULL OR total_quantities_lag IS NULL THEN 0 ELSE CAST( quantities_lag AS DECIMAL(16, 5) )/ CAST( total_quantities_lag AS DECIMAL(16, 5) ) END AS lag_foreign_export_share_ckjr FROM aggregate LEFT JOIN ( SELECT year, regime, foreign_ownership, city_prod, destination, HS6, quantities as quantities_lag FROM aggregate ) as lag_quantities ON aggregate.year_lag = lag_quantities.year AND aggregate.regime = lag_quantities.regime AND aggregate.foreign_ownership = lag_quantities.foreign_ownership AND aggregate.city_prod = lag_quantities.city_prod AND aggregate.HS6 = lag_quantities.HS6 AND aggregate.destination = lag_quantities.destination LEFT JOIN ( SELECT year, regime, HS6, city_prod, destination, SUM(quantities) as total_quantities_lag FROM aggregate GROUP BY year, regime, HS6, city_prod, destination ) as group_lag ON aggregate.year_lag = group_lag.year AND aggregate.regime = group_lag.regime AND aggregate.city_prod = group_lag.city_prod AND aggregate.HS6 = group_lag.HS6 AND aggregate.destination = group_lag.destination INNER JOIN ( SELECT DISTINCT(citycn) as citycn, cityen, geocode4_corr FROM chinese_lookup.city_cn_en ) AS city_cn_en ON city_cn_en.citycn = aggregate.city_prod LEFT JOIN chinese_lookup.country_cn_en ON country_cn_en.Country_cn = aggregate.destination WHERE aggregate.foreign_ownership = 'FOREIGN' AND iso_alpha IS NOT NULL )"}}], "schema": [{"Name": "foreign_ownership", "Type": "varchar(10)", "Comment": "Only FOREIGN"}], "partition_keys": ["year_lag", "regime", "geocode4_corr", "iso_alpha", "hs6"]}}, {"STEPS_2": {"name": "Create lag foreign export at the city, product level", "execution": [{"database": "chinese_trade", "name": "lag_foreign_export_ckr", "s3_location": "ATHENA/MAIN", "output_id": "", "query": {"top": "WITH filter_data AS ( SELECT date as year, id, trade_type, business_type, CASE WHEN length(hs) < 5 THEN CONCAT('0', hs) ELSE hs END as hs6, city_prod, quantities, value, CASE WHEN trade_type = '\u8fdb\u6599\u52a0\u5de5\u8d38\u6613' OR trade_type = '\u4e00\u822c\u8d38\u6613' THEN 'ELIGIBLE' ELSE 'NOT_ELIGIBLE' END as regime, CASE WHEN business_type = '\u5916\u5546\u72ec\u8d44\u4f01\u4e1a' THEN 'FOREIGN' ELSE 'NO_FOREIGN' END as foreign_ownership FROM chinese_trade.import_export WHERE date in ( '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010' ) AND imp_exp = '\u51fa\u53e3' AND ( trade_type = '\u8fdb\u6599\u52a0\u5de5\u8d38\u6613' OR trade_type = '\u4e00\u822c\u8d38\u6613' OR trade_type = '\u6765\u6599\u52a0\u5de5\u88c5\u914d\u8d38\u6613' OR trade_type = '\u52a0\u5de5\u8d38\u6613' ) AND intermediate = 'No' AND quantities > 0 AND value > 0 )", "middle": "SELECT * FROM ( WITH aggregate as ( SELECT year, CAST( CAST(year AS INTEGER) -1 AS VARCHAR ) as year_lag, regime, foreign_ownership, city_prod, HS6, SUM(quantities) as quantities FROM filter_data GROUP BY year, regime, foreign_ownership, city_prod, HS6 )", "bottom": "SELECT aggregate.year, aggregate.year_lag, aggregate.regime, aggregate.foreign_ownership, geocode4_corr, aggregate.HS6, quantities, CASE WHEN quantities_lag IS NULL THEN 0 ELSE quantities_lag END AS quantities_lag, CASE WHEN total_quantities_lag IS NULL THEN 0 ELSE total_quantities_lag END AS total_quantities_lag, CASE WHEN quantities_lag IS NULL OR total_quantities_lag IS NULL THEN 0 ELSE CAST( quantities_lag AS DECIMAL(16, 5) )/ CAST( total_quantities_lag AS DECIMAL(16, 5) ) END AS lag_foreign_export_share_ckr FROM aggregate LEFT JOIN ( SELECT year, regime, foreign_ownership, city_prod, HS6, quantities as quantities_lag FROM aggregate ) as lag_quantities ON aggregate.year_lag = lag_quantities.year AND aggregate.regime = lag_quantities.regime AND aggregate.foreign_ownership = lag_quantities.foreign_ownership AND aggregate.city_prod = lag_quantities.city_prod AND aggregate.HS6 = lag_quantities.HS6 LEFT JOIN ( SELECT year, regime, HS6, city_prod, SUM(quantities) as total_quantities_lag FROM aggregate GROUP BY year, regime, HS6, city_prod ) as group_lag ON aggregate.year_lag = group_lag.year AND aggregate.regime = group_lag.regime AND aggregate.city_prod = group_lag.city_prod AND aggregate.HS6 = group_lag.HS6 INNER JOIN ( SELECT DISTINCT(citycn) as citycn, cityen, geocode4_corr FROM chinese_lookup.city_cn_en ) AS city_cn_en ON city_cn_en.citycn = aggregate.city_prod WHERE aggregate.foreign_ownership = 'FOREIGN' )"}}], "schema": [{"Name": "", "Type": "", "Comment": ""}], "partition_keys": ["year_lag", "regime", "geocode4_corr", "hs6"]}}, {"STEPS_3": {"name": "Create lag SOE export at the city, product, destination level", "execution": [{"database": "chinese_trade", "name": "lag_soe_export_ckjr", "s3_location": "ATHENA/MAIN", "output_id": "", "query": {"top": "WITH filter_data AS ( SELECT date as year, id, trade_type, business_type, CASE WHEN length(hs) < 5 THEN CONCAT('0', hs) ELSE hs END as hs6, city_prod, CASE WHEN origin_or_destination = '\u963f\u9c81\u5df4' OR origin_or_destination = '\u963f\u9c81\u5df4\u5c9b' THEN '\u963f\u9c81\u5df4\u5c9b' WHEN origin_or_destination = '\u8377\u5c5e\u5b89\u5730\u5217\u65af\u7fa4\u5c9b' OR origin_or_destination = '\u8377\u5c5e\u5b89\u7684\u5217\u65af' THEN '\u8377\u5c5e\u5b89\u7684\u5217\u65af' WHEN origin_or_destination = '\u767e\u6155\u5927' OR origin_or_destination = '\u767e\u6155\u5927\u7fa4\u5c9b' THEN '\u767e\u6155\u5927\u7fa4\u5c9b' WHEN origin_or_destination = '\u591a\u7c73\u5c3c\u514b' OR origin_or_destination = '\u591a\u7c73\u5c3c\u52a0' THEN '\u591a\u7c73\u5c3c\u52a0' WHEN origin_or_destination = '\u6cd5\u56fd' OR origin_or_destination = '\u9a6c\u7ea6\u7279' OR origin_or_destination = '\u9a6c\u7ea6\u7279\u5c9b' THEN '\u6cd5\u56fd' WHEN origin_or_destination = '\u74dc\u5fb7\u7f57\u666e' OR origin_or_destination = '\u74dc\u5fb7\u7f57\u666e\u5c9b' THEN '\u74dc\u5fb7\u7f57\u666e\u5c9b' WHEN origin_or_destination = '\u9a6c\u63d0\u5c3c\u514b' OR origin_or_destination = '\u9a6c\u63d0\u5c3c\u514b\u5c9b' THEN '\u9a6c\u63d0\u5c3c\u514b\u5c9b' WHEN origin_or_destination = '\u963f\u62c9\u4f2f\u8054\u5408\u914b\u957f\u56fd' OR origin_or_destination = '\u963f\u8054\u914b' THEN '\u963f\u62c9\u4f2f\u8054\u5408\u914b\u957f\u56fd' WHEN origin_or_destination = '\u5df4\u54c8\u9a6c' OR origin_or_destination = '\u5df4\u6797' THEN '\u5df4\u6797' WHEN origin_or_destination = '\u4e2d\u56fd' OR origin_or_destination = '\u4e2d\u534e\u4eba\u6c11\u5171\u548c\u56fd' OR origin_or_destination = '\u53f0\u6e7e\u7701' THEN '\u4e2d\u56fd' WHEN origin_or_destination = '\u5357\u65af\u62c9\u592b\u8054\u76df\u5171\u548c\u56fd' OR origin_or_destination = '\u524d\u5357\u9a6c\u5176\u987f' OR origin_or_destination = '\u524d\u5357\u65af\u62c9\u592b\u9a6c\u5176\u987f\u5171\u548c\u56fd' THEN '\u5357\u65af\u62c9\u592b\u8054\u76df\u5171\u548c\u56fd' WHEN origin_or_destination = '\u5409\u5c14\u5409\u65af' OR origin_or_destination = '\u5409\u5c14\u5409\u65af\u65af\u5766' THEN '\u5409\u5c14\u5409\u65af\u65af\u5766' WHEN origin_or_destination = '\u9ed1\u5c71' OR origin_or_destination = '\u585e\u5c14\u7ef4\u4e9a' THEN '\u585e\u5c14\u7ef4\u4e9a' ELSE origin_or_destination END AS destination, quantities, value, CASE WHEN trade_type = '\u8fdb\u6599\u52a0\u5de5\u8d38\u6613' OR trade_type = '\u4e00\u822c\u8d38\u6613' THEN 'ELIGIBLE' ELSE 'NOT_ELIGIBLE' END as regime, CASE WHEN Business_type = '\u56fd\u6709\u4f01\u4e1a' OR Business_type = '\u56fd\u6709' THEN 'SOE' ELSE 'NO_SOE' END as SOE_ownership FROM chinese_trade.import_export WHERE date in ( '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010' ) AND imp_exp = '\u51fa\u53e3' AND ( trade_type = '\u8fdb\u6599\u52a0\u5de5\u8d38\u6613' OR trade_type = '\u4e00\u822c\u8d38\u6613' OR trade_type = '\u6765\u6599\u52a0\u5de5\u88c5\u914d\u8d38\u6613' OR trade_type = '\u52a0\u5de5\u8d38\u6613' ) AND intermediate = 'No' AND quantities > 0 AND value > 0 )", "middle": "SELECT * FROM ( WITH aggregate as ( SELECT year, CAST( CAST(year AS INTEGER) -1 AS VARCHAR ) as year_lag, regime, SOE_ownership, city_prod, HS6, destination, SUM(quantities) as quantities FROM filter_data GROUP BY year, regime, SOE_ownership, city_prod, HS6, destination )", "bottom": "SELECT aggregate.year, aggregate.year_lag, aggregate.regime, aggregate.SOE_ownership, geocode4_corr, iso_alpha, aggregate.HS6, quantities, CASE WHEN quantities_lag IS NULL THEN 0 ELSE quantities_lag END AS quantities_lag, CASE WHEN total_quantities_lag IS NULL THEN 0 ELSE total_quantities_lag END AS total_quantities_lag, CASE WHEN quantities_lag IS NULL OR total_quantities_lag IS NULL THEN 0 ELSE CAST( quantities_lag AS DECIMAL(16, 5) )/ CAST( total_quantities_lag AS DECIMAL(16, 5) ) END AS lag_soe_export_share_ckjr FROM aggregate LEFT JOIN ( SELECT year, regime, SOE_ownership, city_prod, destination, HS6, quantities as quantities_lag FROM aggregate ) as lag_quantities ON aggregate.year_lag = lag_quantities.year AND aggregate.regime = lag_quantities.regime AND aggregate.SOE_ownership = lag_quantities.SOE_ownership AND aggregate.city_prod = lag_quantities.city_prod AND aggregate.HS6 = lag_quantities.HS6 AND aggregate.destination = lag_quantities.destination LEFT JOIN ( SELECT year, regime, HS6, city_prod, destination, SUM(quantities) as total_quantities_lag FROM aggregate GROUP BY year, regime, HS6, city_prod, destination ) as group_lag ON aggregate.year_lag = group_lag.year AND aggregate.regime = group_lag.regime AND aggregate.city_prod = group_lag.city_prod AND aggregate.HS6 = group_lag.HS6 AND aggregate.destination = group_lag.destination INNER JOIN ( SELECT DISTINCT(citycn) as citycn, cityen, geocode4_corr FROM chinese_lookup.city_cn_en ) AS city_cn_en ON city_cn_en.citycn = aggregate.city_prod LEFT JOIN chinese_lookup.country_cn_en ON country_cn_en.Country_cn = aggregate.destination WHERE aggregate.SOE_ownership = 'SOE' AND iso_alpha IS NOT NULL )"}}], "schema": [{"Name": "", "Type": "", "Comment": ""}], "partition_keys": ["year_lag", "regime", "geocode4_corr", "iso_alpha", "hs6"]}}, {"STEPS_4": {"name": "Create lag SOE export at the city, product level", "execution": [{"database": "chinese_trade", "name": "lag_soe_export_ckr", "s3_location": "ATHENA/MAIN", "output_id": "", "query": {"top": "WITH filter_data AS ( SELECT date as year, id, trade_type, business_type, CASE WHEN length(hs) < 5 THEN CONCAT('0', hs) ELSE hs END as hs6, city_prod, quantities, value, CASE WHEN trade_type = '\u8fdb\u6599\u52a0\u5de5\u8d38\u6613' OR trade_type = '\u4e00\u822c\u8d38\u6613' THEN 'ELIGIBLE' ELSE 'NOT_ELIGIBLE' END as regime, CASE WHEN Business_type = '\u56fd\u6709\u4f01\u4e1a' OR Business_type = '\u56fd\u6709' THEN 'SOE' ELSE 'NO_SOE' END as SOE_ownership FROM chinese_trade.import_export WHERE date in ( '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010' ) AND imp_exp = '\u51fa\u53e3' AND ( trade_type = '\u8fdb\u6599\u52a0\u5de5\u8d38\u6613' OR trade_type = '\u4e00\u822c\u8d38\u6613' OR trade_type = '\u6765\u6599\u52a0\u5de5\u88c5\u914d\u8d38\u6613' OR trade_type = '\u52a0\u5de5\u8d38\u6613' ) AND intermediate = 'No' AND quantities > 0 AND value > 0 )", "middle": "SELECT * FROM ( WITH aggregate as ( SELECT year, CAST( CAST(year AS INTEGER) -1 AS VARCHAR ) as year_lag, regime, SOE_ownership, city_prod, HS6, SUM(quantities) as quantities FROM filter_data GROUP BY year, regime, SOE_ownership, city_prod, HS6 )", "bottom": "SELECT aggregate.year, aggregate.year_lag, aggregate.regime, aggregate.SOE_ownership, geocode4_corr, aggregate.HS6, quantities, CASE WHEN quantities_lag IS NULL THEN 0 ELSE quantities_lag END AS quantities_lag, CASE WHEN total_quantities_lag IS NULL THEN 0 ELSE total_quantities_lag END AS total_quantities_lag, CASE WHEN quantities_lag IS NULL OR total_quantities_lag IS NULL THEN 0 ELSE CAST( quantities_lag AS DECIMAL(16, 5) )/ CAST( total_quantities_lag AS DECIMAL(16, 5) ) END AS lag_soe_export_share_ckr FROM aggregate LEFT JOIN ( SELECT year, regime, SOE_ownership, city_prod, HS6, quantities as quantities_lag FROM aggregate ) as lag_quantities ON aggregate.year_lag = lag_quantities.year AND aggregate.regime = lag_quantities.regime AND aggregate.SOE_ownership = lag_quantities.SOE_ownership AND aggregate.city_prod = lag_quantities.city_prod AND aggregate.HS6 = lag_quantities.HS6 LEFT JOIN ( SELECT year, regime, HS6, city_prod, SUM(quantities) as total_quantities_lag FROM aggregate GROUP BY year, regime, HS6, city_prod ) as group_lag ON aggregate.year_lag = group_lag.year AND aggregate.regime = group_lag.regime AND aggregate.city_prod = group_lag.city_prod AND aggregate.HS6 = group_lag.HS6 INNER JOIN ( SELECT DISTINCT(citycn) as citycn, cityen, geocode4_corr FROM chinese_lookup.city_cn_en ) AS city_cn_en ON city_cn_en.citycn = aggregate.city_prod WHERE aggregate.SOE_ownership = 'SOE' )"}}], "schema": [{"Name": "", "Type": "", "Comment": ""}], "partition_keys": ["year_lag", "regime", "geocode4_corr", "hs6"]}}, {"STEPS_5": {"name": "Merge export values with quality baseline table", "execution": [{"database": "chinese_trade", "name": "quality_vat_export_covariate_2003_2010", "s3_location": "ATHENA/MAIN", "output_id": "", "query": {"top": " WITH merge_cov AS ( SELECT quality_vat_export_2003_2010.cityen, quality_vat_export_2003_2010.geocode4_corr, quality_vat_export_2003_2010.year, quality_vat_export_2003_2010.regime, quality_vat_export_2003_2010.hs6, hs4, hs3, quality_vat_export_2003_2010.country_en, quality_vat_export_2003_2010.iso_alpha, gni_per_capita, gpd_per_capita, income_group, quantity, value, unit_price, kandhelwal_quality, price_adjusted_quality, lag_tax_rebate, ln_lag_tax_rebate,lag_vat_reb_m, ln_lag_vat_reb_m, lag_import_tax, ln_lag_import_tax, sigma, sigma_price, y, prediction, residual, FE_ck, FE_cst, FE_ckr, FE_csrt, FE_kt, FE_kj, FE_jt, FE_ckj, CASE WHEN lag_foreign_export_share_ckr IS NULL THEN 0 ELSE lag_foreign_export_share_ckr END AS lag_foreign_export_share_ckr, CASE WHEN lag_soe_export_share_ckr IS NULL THEN 0 ELSE lag_soe_export_share_ckr END AS lag_soe_export_share_ckr, CASE WHEN lag_foreign_export_share_ckjr IS NULL THEN 0 ELSE lag_foreign_export_share_ckjr END AS lag_foreign_export_share_ckjr, CASE WHEN lag_soe_export_share_ckjr IS NULL THEN 0 ELSE lag_soe_export_share_ckjr END AS lag_soe_export_share_ckjr FROM quality_vat_export_2003_2010 ", "middle": " LEFT JOIN chinese_trade.lag_foreign_export_ckr ON quality_vat_export_2003_2010.geocode4_corr = lag_foreign_export_ckr.geocode4_corr AND quality_vat_export_2003_2010.year = lag_foreign_export_ckr.year AND quality_vat_export_2003_2010.hs6 = lag_foreign_export_ckr.hs6 AND quality_vat_export_2003_2010.regime = lag_foreign_export_ckr.regime LEFT JOIN chinese_trade.lag_soe_export_ckr ON quality_vat_export_2003_2010.geocode4_corr = lag_soe_export_ckr.geocode4_corr AND quality_vat_export_2003_2010.year = lag_soe_export_ckr.year AND quality_vat_export_2003_2010.hs6 = lag_soe_export_ckr.hs6 AND quality_vat_export_2003_2010.regime = lag_soe_export_ckr.regime LEFT JOIN chinese_trade.lag_foreign_export_ckjr ON quality_vat_export_2003_2010.geocode4_corr = lag_foreign_export_ckjr.geocode4_corr AND quality_vat_export_2003_2010.year = lag_foreign_export_ckjr.year AND quality_vat_export_2003_2010.hs6 = lag_foreign_export_ckjr.hs6 AND quality_vat_export_2003_2010.regime = lag_foreign_export_ckjr.regime AND quality_vat_export_2003_2010.iso_alpha = lag_foreign_export_ckjr.iso_alpha LEFT JOIN chinese_trade.lag_soe_export_ckjr ON quality_vat_export_2003_2010.geocode4_corr = lag_soe_export_ckjr.geocode4_corr AND quality_vat_export_2003_2010.year = lag_soe_export_ckjr.year AND quality_vat_export_2003_2010.hs6 = lag_soe_export_ckjr.hs6 AND quality_vat_export_2003_2010.regime = lag_soe_export_ckjr.regime AND quality_vat_export_2003_2010.iso_alpha = lag_soe_export_ckjr.iso_alpha LEFT JOIN world_bank.world_gdp_per_capita ON quality_vat_export_2003_2010.iso_alpha = world_gdp_per_capita.iso_alpha03 AND quality_vat_export_2003_2010.year = world_gdp_per_capita.year WHERE quantity IS NOT NULL) ", "bottom": " SELECT merge_cov.cityen, merge_cov.geocode4_corr, merge_cov.year, merge_cov.regime, merge_cov.hs6, hs4, hs3, country_en, merge_cov.iso_alpha, gni_per_capita, gpd_per_capita, income_group, quantity, value, unit_price, kandhelwal_quality, price_adjusted_quality, lag_tax_rebate, ln_lag_tax_rebate,lag_vat_reb_m, ln_lag_vat_reb_m, lag_import_tax, ln_lag_import_tax, lag_soe_export_share_ckr, lag_foreign_export_share_ckr, lag_soe_export_share_ckjr, lag_foreign_export_share_ckjr, sigma, sigma_price, y, prediction, residual, FE_ck, FE_cst, FE_ckr, FE_csrt, FE_kt, FE_kj, FE_jt, FE_ckj FROM merge_cov INNER JOIN ( SELECT year, regime, geocode4_corr, iso_alpha, hs6 FROM merge_cov GROUP BY year, regime, geocode4_corr, iso_alpha, hs6 HAVING COUNT(*) = 1 ) as no_duplicate ON merge_cov.year = no_duplicate.year AND merge_cov.regime = no_duplicate.regime AND merge_cov.geocode4_corr = no_duplicate.geocode4_corr AND merge_cov.iso_alpha = no_duplicate.iso_alpha AND merge_cov.hs6 = no_duplicate.hs6 "}}], "schema": [{"Name": "", "Type": "", "Comment": ""}], "partition_keys": ["year", "regime", "geocode4_corr", "iso_alpha", "hs6"]}}], "template": {"top": "CREATE TABLE {}.{} WITH (format = 'PARQUET') AS "}}}, "ANALYSIS": {"COUNT_MISSING": {"top": "SELECT COUNT(*) as nb_obs, ", "middle": "COUNT(*) - COUNT({0}) AS {0}", "bottom": " FROM {}.{}"}, "CATEGORICAL": {"PAIR": "SELECT {2}, COUNT(*) AS nb_obs FROM {0}.{1} GROUP BY {2} ORDER BY nb_obs DESC ", "MULTI_PAIR": "SELECT {2}, {3}, COUNT(*) AS nb_obs FROM {0}.{1} GROUP BY {2}, {3} ORDER BY nb_obs DESC "}, "CONTINUOUS": {"DISTRIBUTION": {"top_1": "SELECT * FROM (WITH table_wrapper AS (", "top_2": ") SELECT table_wrapper.pct,", "top_3": " FROM table_wrapper ", "middle_1": "  LEFT JOIN ( ", "middle_2": " ) as table_2_{0} ON table_wrapper.pct = table_2_{0}.pct ", "bottom": "WITH table_{3} AS ( SELECT MAP( ARRAY[0.25, 0.50, 0.75, 0.95, 0.99], approx_percentile( {2}, ARRAY[0.25, 0.50, 0.75, 0.95, 0.99] ) ) as nest FROM {0}.{1} ) SELECT pct, value AS {2} FROM table_{3} CROSS JOIN UNNEST(nest) AS t(pct, value)"}, "ONE_PAIR_DISTRIBUTION": {"top_1": "SELECT * FROM (WITH table_wrapper AS (", "top_2": ") SELECT table_wrapper.pct, table_wrapper.{}, ", "top_3": " FROM table_wrapper ", "middle_1": "  LEFT JOIN ( ", "middle_2": " ) as table_2_{0} ON table_wrapper.{1} = table_2_{0}.{1} AND table_wrapper.pct = table_2_{0}.pct ", "bottom": "WITH table_{3} AS ( SELECT {4}, MAP(ARRAY[0.25, 0.50, 0.75, 0.95, 0.99], approx_percentile( {2}, ARRAY[0.25, 0.50, 0.75, 0.95, 0.99] ) ) as nest FROM {0}.{1} GROUP BY {4}) SELECT {4}, pct, value AS {2} FROM table_{3} CROSS JOIN UNNEST(nest) AS t(pct, value)"}, "TWO_PAIRS_DISTRIBUTION": "WITH dataset AS ( SELECT {2}, {3}, MAP( ARRAY[0.25, 0.50, 0.75, 0.95, 0.99], approx_percentile( {4}, ARRAY[0.25, 0.50, 0.75, 0.95, 0.99] ) ) as nest FROM {0}.{1} GROUP BY {2}, {3} ) SELECT {2}, {3}, pct, value AS {4} FROM dataset CROSS JOIN UNNEST(nest) AS t(pct, value)"}, "COUNT_DUPLICATES": {"query": "SELECT CNT, COUNT(*) AS CNT_DUPLICATE FROM ( SELECT {2}, COUNT(*) as CNT FROM {0}.{1} GROUP BY year, {2} ) GROUP BY CNT ORDER BY CNT_DUPLICATE"}}}